# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
version: 2

project_name: gotmpl

env:
  - GO111MODULE=on

before:
  hooks:
    - go mod tidy

snapshot:
  version_template: "{{ .Version }}"

gomod:
  proxy: true

# This should be enabled when the limitations are lifted or the issues are resolved.
# https://goreleaser.com/customization/upx/
# upx:
#   - enabled: true

report_sizes: true

metadata:
  mod_timestamp: "{{ .CommitTimestamp }}"

builds:
  - id: linux
    env:
      - CGO_ENABLED=0
    goos:
      - linux
    goarch:
      - amd64
      - "386"
      - arm64
      - arm
      - loong64
      - ppc64le
      - riscv64
      - s390x
    goarm:
      - "5"
      - "6"
      - "7"
    flags:
      - -trimpath
    ldflags:
      - -s -w -X main.version={{.Version}}
    mod_timestamp: "{{ .CommitTimestamp }}"
  - id: darwin
    env:
      - CGO_ENABLED=0
    goos:
      - darwin
    goarch:
      - amd64
      - arm64
    flags:
      - -trimpath
    ldflags:
      - -s -w -X main.version={{.Version}}
    mod_timestamp: "{{ .CommitTimestamp }}"
  - id: windows
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
      - arm64
    flags:
      - -trimpath
    ldflags:
      - -s -w -X main.version={{.Version}}
    mod_timestamp: "{{ .CommitTimestamp }}"

  # --- NFPM builds (only to build packages, not archived) --- #

  # Apline: aarch64 (arm64), armhf (arm/6), armv7 (arm/7), loongarch64 (loong64), ppc64le, riscv64, s390x, x86 (386), x86_64 (amd64)
  # https://dl-cdn.alpinelinux.org/alpine/v3.21/main/
  - id: linux_apk
    env:
      - CGO_ENABLED=0
    goos:
      - linux
    goarch:
      - arm64
      - arm
      - loong64
      - ppc64le
      - riscv64
      - s390x
      - "386"
      - amd64
    goarm:
      - "6"
      - "7"
    flags:
      - -trimpath
    ldflags:
      - -s -w -X main.version={{.Version}}
    mod_timestamp: "{{ .CommitTimestamp }}"
  # Debian: amd64, arm64, armel (arm/5), armhf (arm/7), i386 (386), ppc64el (ppc64le), riscv64, s390x
  # https://www.debian.org/ports/
  # Add other distros for wider support on demand
  - id: linux_deb
    env:
      - CGO_ENABLED=0
    goos:
      - linux
    goarch:
      - amd64
      - arm64
      - arm
      - "386"
      - ppc64le
      - riscv64
      - s390x
    goarm:
      - "5"
      - "7"
    flags:
      - -trimpath
    ldflags:
      - -s -w -X main.version={{.Version}}
    mod_timestamp: "{{ .CommitTimestamp }}"
  # RHEL: x86-64 (amd64), arm64, POWER9 (ppc64le), IBM Z - z14 (s390x)
  # https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/10/html/10.0_release_notes/architectures
  # Add other distros for wider support on demand
  - id: linux_rpm
    env:
      - CGO_ENABLED=0
    goos:
      - linux
    goarch:
      - amd64
      - arm64
      - ppc64le
      - s390x
    flags:
      - -trimpath
    ldflags:
      - -s -w -X main.version={{.Version}}
    mod_timestamp: "{{ .CommitTimestamp }}"

# Uncomment to build universal binaries on macOS
# https://goreleaser.com/customization/universalbinaries/
# universal_binaries:
#   - name_template: "{{.ProjectName}}_{{.Version}}"
#     mod_timestamp: "{{ .CommitTimestamp }}"
#     replace: true

nfpms:
  - id: linux_apk
    ids: [linux_apk]
    formats:
      - apk
    file_name_template: "{{ .ConventionalFileName }}"
    homepage: https://gotmpl.dev
    # TODO: description
    description: |-
      Release engineering, simplified.
      GoReleaser allows you to release easily build, package, publish, and
      announce to several places.
    maintainer: Márton Torner <m@gotmpl.dev>
    license: GPL-3.0-or-later
    vendor: gotmpl
    bindir: /usr/bin
    section: utils
    mtime: "{{ .CommitDate }}"
    contents:
      - src: ./LICENSE
        dst: /usr/share/doc/gotmpl/copyright
        file_info:
          mode: 0644
          mtime: "{{ .CommitDate }}"
  - id: linux_deb
    ids: [linux_deb]
    formats:
      - deb
    file_name_template: "{{ .ConventionalFileName }}"
    homepage: https://gotmpl.dev
    # TODO: description
    description: |-
      Release engineering, simplified.
      GoReleaser allows you to release easily build, package, publish, and
      announce to several places.
    maintainer: Márton Torner <m@gotmpl.dev>
    license: GPL-3.0-or-later
    vendor: gotmpl
    bindir: /usr/bin
    section: utils
    mtime: "{{ .CommitDate }}"
    contents:
      - src: ./LICENSE
        dst: /usr/share/doc/gotmpl/copyright
        file_info:
          mode: 0644
          mtime: "{{ .CommitDate }}"
  - id: linux_rpm
    ids: [linux_rpm]
    formats:
      - rpm
    file_name_template: "{{ .ConventionalFileName }}"
    homepage: https://gotmpl.dev
    # TODO: description
    description: |-
      Release engineering, simplified.
      GoReleaser allows you to release easily build, package, publish, and
      announce to several places.
    maintainer: Márton Torner <m@gotmpl.dev>
    license: GPL-3.0-or-later
    vendor: gotmpl
    bindir: /usr/bin
    section: utils
    mtime: "{{ .CommitDate }}"
    contents:
      - src: ./LICENSE
        dst: /usr/share/doc/gotmpl/copyright
        file_info:
          mode: 0644
          mtime: "{{ .CommitDate }}"

archives:
  - id: linux
    ids: [linux]
    builds_info:
      group: root
      owner: root
      mtime: "{{ .CommitDate }}"
  - id: darwin
    ids: [darwin]
    builds_info:
      group: root
      owner: root
      mtime: "{{ .CommitDate }}"
  - id: windows
    ids: [windows]
    builds_info:
      group: root
      owner: root
      mtime: "{{ .CommitDate }}"

checksum:
  name_template: "checksums.txt"

sboms:
  - artifacts: archive

signs:
  - artifacts: checksum
    cmd: cosign
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "--yes"
      - "${artifact}"
    certificate: "${artifact}.pem"
    output: true

# TODO: docker
# dockers:
#   - image_templates:
#       - "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}-amd64"
#     dockerfile: docker.io/gotmpl/gotmpl/Dockerfile
#     use: buildx
#     build_flag_templates:
#       - "--pull"
#       - "--no-cache"
#       - "--label=org.opencontainers.image.name={{.ProjectName}}"
#       - "--label=org.opencontainers.image.version={{.Version}}"
#       - "--label=org.opencontainers.image.revision={{.FullCommit}}"
#       - "--label=org.opencontainers.image.source={{.GitURL}}"
#       - "--label=org.opencontainers.image.created={{.Date}}"
#       - "--platform=linux/amd64"
#     goarch: amd64
#   - image_templates:
#       - "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}-arm64"
#     dockerfile: docker.io/gotmpl/gotmpl/Dockerfile
#     use: buildx
#     build_flag_templates:
#       - "--pull"
#       - "--no-cache"
#       - "--label=org.opencontainers.image.name={{.ProjectName}}"
#       - "--label=org.opencontainers.image.version={{.Version}}"
#       - "--label=org.opencontainers.image.revision={{.FullCommit}}"
#       - "--label=org.opencontainers.image.source={{.GitURL}}"
#       - "--label=org.opencontainers.image.created={{.Date}}"
#       - "--platform=linux/arm64"
#     goarch: arm64

# docker_manifests:
#   - name_template: "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}"
#     image_templates:
#       - "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}-amd64"
#       - "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}-arm64"
#   - name_template: "{{.ProjectName}}/{{.ProjectName}}:{{ .Major }}.{{ .Minor }}"
#     image_templates:
#       - "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}-amd64"
#       - "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}-arm64"
#   - name_template: "{{.ProjectName}}/{{.ProjectName}}:{{ .Major }}"
#     image_templates:
#       - "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}-amd64"
#       - "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}-arm64"
#   # TODO: only tag latest if we are sure that the version is the latest
#   - name_template: "{{.ProjectName}}/{{.ProjectName}}:latest"
#     image_templates:
#       - "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}-amd64"
#       - "{{.ProjectName}}/{{.ProjectName}}:{{ .Version }}-arm64"

# docker_signs:
#   - artifacts: manifests
#     cmd: cosign
#     args:
#       - "sign"
#       - "--yes"
#       - "${artifact}@${digest}"
#     output: true

# This should be enabled if we start using milestones
# milestones:
#   - close: true

# https://www.conventionalcommits.org/en/v1.0.0/
changelog:
  sort: asc
  filters:
    include:
      - "^feat:"
      - "^fix:"
      - "^perf:"
  groups:
    - title: "Features"
      regexp: '^feat(\([[:word:]]+\))??!?:.+$'
      order: 100
    - title: "Bug fixes"
      regexp: '^fix(\([[:word:]]+\))??!?:.+$'
      order: 200
    - title: "Performance improvements"
      regexp: '^perf(\([[:word:]]+\))??!?:.+$'
      order: 300

release:
  name_template: "{{ .Version }}"
  draft: true
  footer: |
    **Full Changelog**: https://github.com/gotmpl/gotmpl/compare/{{ .PreviousTag }}...{{ .Tag }}
